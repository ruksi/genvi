[metadata]
name = myproject
version = attr:myproject.__version__
description = <missing description>
long_description = file: README.md
long_description_content_type = text/markdown
author = Ruksi Korpisara
author_email = me@ruk.si
maintainer = Ruksi Korpisara
maintainer_email = me@ruk.si
license = MIT
license_file = LICENSE
classifiers =
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10

[options]
packages = find:
install_requires = file:requirements.in
python_requires = >=3.7
include_package_data = True

[options.packages.find]
where = .
exclude =
    tests
    tests.*
    *.tests
    *.tests.*

[options.entry_points]
console_scripts =
    myproject=myproject.console.executable:main

[darglint]
docstring_style = sphinx
strictness = long

[flake8]
max-line-length = 88
max-complexity = 10
max-cognitive-complexity = 7
max-expression-complexity = 7
docstring-convention = pep257
ban-relative-imports = true
extend-ignore =
    D1,      # allow missing comments, but be strict if provided
    E722,    # bare except, to remove duplicate vs. `flake8-bugbear`
per-file-ignores =
    tests/*.py, *_test.py: S
    bump.py, freezenuts.py, is_virtualenv.py: T201
select = # https://flakes.orsinium.dev/
    A,     # checks from `flake8-builtins`
    B,     # checks from `flake8-bugbear`
    B9,    # more opinionated checks from `flake8-bugbear`
    C,
    C4,    # checks from `flake8-comprehensions`
    C9,    # checks from `mccabe` that comes with `flake8`
    CFQ,   # checks from `flake8-functions`
    D,     # checks from `flake8-docstrings`
    E,     # checks from `pycodestyle` that comes with `flake8`
    E8,    # checks from `flake8-eradicate`
    ECE,   # checks from `flake8-expression-complexity`
    F,     # checks from `pyflakes` that comes with `flake8`
    I25,   # checks from `flake8-tidy-imports`
    N4,    # checks from `flake8-broken-line`
    N8,    # checks from `pep8-naming`
    PL,    # checks from `flake8-pylint`
    PT,    # checks from `flake8-pytest-style`
    R5,    # checks from `flake8-return`
    RST,   # checks from `flake8-rst-docstrings`
    S,     # checks from `flake8-bandit`
    T20,   # checks from `flake8-print`
    TAE,   # checks from `flake8-annotations-complexity`
    W,     # checks from `pycodestyle` that comes with `flake8`
