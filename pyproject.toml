[project]
name = "myproject"
description = "<missing description>"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
keywords = []
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
authors = [
    { name = "Ruksi Korpisara", email = "me@ruk.si" },
]
dynamic = ["version", "dependencies"]

[project.urls]
Documentation = "https://github.com/ruksi/genvi#readme"
Issues = "https://github.com/ruksi/genvi/issues"
Source = "https://github.com/ruksi/genvi"

[project.scripts]
myproject = "myproject.console.core:cli"

[build-system]
requires = ["hatchling", "hatch-requirements-txt==0.3.0"]
build-backend = "hatchling.build"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.in"]

[tool.hatch.version]
source = "regex"
path = "myproject/VERSION"
pattern = "^(?P<version>.+?)$"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github/",
]

[tool.hatch.build.targets.wheel]
packages = [
    "myproject",
]

[tool.ruff]
preview = true
line-length = 88
target-version = "py38"
flake8-tidy-imports.ban-relative-imports = "all"
mccabe.max-complexity = 10
pydocstyle.convention = "pep257"
select = [
    "ALL", # enable all the rules
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "COM812", # Missing trailing comma in Python 3.6+, may cause conflicts with formatter
    "CPY001", # Missing copyright notice at top of file
    "D1", # Missing docstring in {location} (don't require but be strict if provided)
    "EM", # Exception must not use string literal, assign to variable first
    "ISC001", # Ignoring implicit string concatenation, may cause conflicts with formatter
]

[tool.ruff.per-file-ignores]
"**/tests/**" = [
    "ANN201", # Missing return type annotation for public function
    "S101", # Use of `assert` detected
]
"tools/is_virtualenv/core.py" = [
    "ANN201", # Missing return type annotation for public function
]

[tool.mypy]
strict = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_expr = false        # individual expressions can be Any
disallow_any_unimported = true   # make sure types from dependencies get resolved
disallow_subclassing_any = true
ignore_missing_imports = false
show_error_codes = true
warn_unreachable = true

[tool.pytest.ini_options]
addopts = [
    '--strict-config',
    '--strict-markers',
    '--import-mode=importlib', # the best practice https://docs.pytest.org/en/latest/explanation/goodpractices.html
]
norecursedirs = ['.*', 'build', 'dist', 'venv']
filterwarnings = ['error']  # turn warnings into errors
log_level = 'NOTSET'        # capture all `logging` messages

[tool.coverage.run]
branch = true
parallel = true
source = ['.']
omit = [
    '*/site-packages/*',
    '*/tests/*',
    '*_test.py',
]

[tool.coverage.report]
exclude_lines = [
    'class .*Protocol.*\)',
    'def __repr__',
    'if __name__ == .__main__.:',
    'import',
    'pragma: no cover',
    'raise NotImplementedError',
    '@(abc\.)?abstractmethod',
]
